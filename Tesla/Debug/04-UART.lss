
04-UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800066  00800066  00000d3c  2**0
                  ALLOC
  3 .stab         00001158  00000000  00000000  00000d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b22  00000000  00000000  00001e94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 82 01 	jmp	0x304	; 0x304 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a6 36       	cpi	r26, 0x66	; 102
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a6 e6       	ldi	r26, 0x66	; 102
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 37       	cpi	r26, 0x77	; 119
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <main>
  8a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_voidInit>:

static void (*UART_RX_COMPLETE_CallBack)(u8)={NULL};
//static void (*UART_TX_COMPLETE_CallBack)(void);

void UART_voidInit(void)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	0f 92       	push	r0
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62

#if 	RXCIE == RXCI_DS
	CLR_BIT(UCSRB , UCSRB_RXCIE);
#elif 	RXCIE == RXCI_EN
	SET_BIT(UCSRB , UCSRB_RXCIE);
  9c:	aa e2       	ldi	r26, 0x2A	; 42
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	ea e2       	ldi	r30, 0x2A	; 42
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	8c 93       	st	X, r24
#endif

#if 	TXCIE == TXCI_DS
	CLR_BIT(UCSRB , UCSRB_TXCIE);
  aa:	aa e2       	ldi	r26, 0x2A	; 42
  ac:	b0 e0       	ldi	r27, 0x00	; 0
  ae:	ea e2       	ldi	r30, 0x2A	; 42
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8f 7b       	andi	r24, 0xBF	; 191
  b6:	8c 93       	st	X, r24
#elif 	TXCIE == TXCI_EN
	SET_BIT(UCSRB , UCSRB_TXCIE);
#endif

#if 	UDRIE == UDRI_DS
	CLR_BIT(UCSRB , UCSRB_UDRIE);
  b8:	aa e2       	ldi	r26, 0x2A	; 42
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	ea e2       	ldi	r30, 0x2A	; 42
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8f 7d       	andi	r24, 0xDF	; 223
  c4:	8c 93       	st	X, r24
#endif

#if 	RXEN == RX_DS
	CLR_BIT(UCSRB , UCSRB_RXEN);
#elif 	RXEN == RX_EN
	SET_BIT(UCSRB , UCSRB_RXEN);
  c6:	aa e2       	ldi	r26, 0x2A	; 42
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	ea e2       	ldi	r30, 0x2A	; 42
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	80 61       	ori	r24, 0x10	; 16
  d2:	8c 93       	st	X, r24
#endif

#if 	TXEN == TX_DS
	CLR_BIT(UCSRB , UCSRB_TXEN);
#elif 	TXEN == TX_EN
	SET_BIT(UCSRB , UCSRB_TXEN);
  d4:	aa e2       	ldi	r26, 0x2A	; 42
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	ea e2       	ldi	r30, 0x2A	; 42
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	8c 93       	st	X, r24
#endif

	u8 UCSRC_setting=0  ;
  e2:	19 82       	std	Y+1, r1	; 0x01

	SET_BIT(UCSRC_setting , UCSRC_URSEL );
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	80 68       	ori	r24, 0x80	; 128
  e8:	89 83       	std	Y+1, r24	; 0x01

#if 	UMSEL == USART_Asynch
	CLR_BIT(UCSRC_setting , UCSRC_UMSEL);
  ea:	89 81       	ldd	r24, Y+1	; 0x01
  ec:	8f 7b       	andi	r24, 0xBF	; 191
  ee:	89 83       	std	Y+1, r24	; 0x01
#elif 	UMSEL == USART_Synch
	SET_BIT(UCSRC_setting , UCSRC_UMSEL);
#endif

	UCSRC_setting &= ~(0b11<<4);
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	8f 7c       	andi	r24, 0xCF	; 207
  f4:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_setting |= (UPM << 4);

#if 	USBS == SB_1BIT
	CLR_BIT(UCSRC_setting , UCSRC_USBS);
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	87 7f       	andi	r24, 0xF7	; 247
  fa:	89 83       	std	Y+1, r24	; 0x01
#if 	UCSZ == UCSZ_9BIT
	SET_BIT(UCSRB , UCSRB_UCSZ2);
	SET_BIT(UCSRC_setting , UCSRC_UCSZ1);
	SET_BIT(UCSRC_setting , UCSRC_UCSZ0);
#else
	UCSRC_setting &= ~(0b11<< 1);
  fc:	89 81       	ldd	r24, Y+1	; 0x01
  fe:	89 7f       	andi	r24, 0xF9	; 249
 100:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_setting |= (UCSZ << 1);
 102:	89 81       	ldd	r24, Y+1	; 0x01
 104:	86 60       	ori	r24, 0x06	; 6
 106:	89 83       	std	Y+1, r24	; 0x01
#endif

	UCSRC=UCSRC_setting;
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	80 83       	st	Z, r24

	/* Set buad rate to 9600 */
}
 110:	0f 90       	pop	r0
 112:	cf 91       	pop	r28
 114:	df 91       	pop	r29
 116:	08 95       	ret

00000118 <UART_voidTransmitByte_synch>:

void UART_voidTransmitByte_synch(u8 Copy_data)
{
 118:	df 93       	push	r29
 11a:	cf 93       	push	r28
 11c:	0f 92       	push	r0
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
 122:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA , UCSRA_UDRE) == 0);
 124:	eb e2       	ldi	r30, 0x2B	; 43
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	82 95       	swap	r24
 12c:	86 95       	lsr	r24
 12e:	87 70       	andi	r24, 0x07	; 7
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	81 70       	andi	r24, 0x01	; 1
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a1 f3       	breq	.-24     	; 0x124 <UART_voidTransmitByte_synch+0xc>
	UDR = Copy_data ;
 13c:	ec e2       	ldi	r30, 0x2C	; 44
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	89 81       	ldd	r24, Y+1	; 0x01
 142:	80 83       	st	Z, r24
}
 144:	0f 90       	pop	r0
 146:	cf 91       	pop	r28
 148:	df 91       	pop	r29
 14a:	08 95       	ret

0000014c <UART_voidRecieverByte_synch>:

u8 UART_voidRecieverByte_synch(void)
{
 14c:	df 93       	push	r29
 14e:	cf 93       	push	r28
 150:	cd b7       	in	r28, 0x3d	; 61
 152:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA , UCSRA_RXC) == 0);
 154:	eb e2       	ldi	r30, 0x2B	; 43
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	dc f7       	brge	.-10     	; 0x154 <UART_voidRecieverByte_synch+0x8>
	return UDR ;
 15e:	ec e2       	ldi	r30, 0x2C	; 44
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
}
 164:	cf 91       	pop	r28
 166:	df 91       	pop	r29
 168:	08 95       	ret

0000016a <UART_u8GetUDRValue>:

u8 UART_u8GetUDRValue(void)
{
 16a:	df 93       	push	r29
 16c:	cf 93       	push	r28
 16e:	cd b7       	in	r28, 0x3d	; 61
 170:	de b7       	in	r29, 0x3e	; 62
	return UDR ;
 172:	ec e2       	ldi	r30, 0x2C	; 44
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
}
 178:	cf 91       	pop	r28
 17a:	df 91       	pop	r29
 17c:	08 95       	ret

0000017e <UART_voidSetBaudRate>:

void UART_voidSetBaudRate(u32 Copy_u32BoudRate)
{
 17e:	df 93       	push	r29
 180:	cf 93       	push	r28
 182:	cd b7       	in	r28, 0x3d	; 61
 184:	de b7       	in	r29, 0x3e	; 62
 186:	28 97       	sbiw	r28, 0x08	; 8
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	f8 94       	cli
 18c:	de bf       	out	0x3e, r29	; 62
 18e:	0f be       	out	0x3f, r0	; 63
 190:	cd bf       	out	0x3d, r28	; 61
 192:	6d 83       	std	Y+5, r22	; 0x05
 194:	7e 83       	std	Y+6, r23	; 0x06
 196:	8f 83       	std	Y+7, r24	; 0x07
 198:	98 87       	std	Y+8, r25	; 0x08
	u32 BR = 8000000/Copy_u32BoudRate ;
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	92 e1       	ldi	r25, 0x12	; 18
 19e:	aa e7       	ldi	r26, 0x7A	; 122
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	2d 81       	ldd	r18, Y+5	; 0x05
 1a4:	3e 81       	ldd	r19, Y+6	; 0x06
 1a6:	4f 81       	ldd	r20, Y+7	; 0x07
 1a8:	58 85       	ldd	r21, Y+8	; 0x08
 1aa:	bc 01       	movw	r22, r24
 1ac:	cd 01       	movw	r24, r26
 1ae:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__udivmodsi4>
 1b2:	da 01       	movw	r26, r20
 1b4:	c9 01       	movw	r24, r18
 1b6:	89 83       	std	Y+1, r24	; 0x01
 1b8:	9a 83       	std	Y+2, r25	; 0x02
 1ba:	ab 83       	std	Y+3, r26	; 0x03
 1bc:	bc 83       	std	Y+4, r27	; 0x04
	BR /=16 ;
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	9a 81       	ldd	r25, Y+2	; 0x02
 1c2:	ab 81       	ldd	r26, Y+3	; 0x03
 1c4:	bc 81       	ldd	r27, Y+4	; 0x04
 1c6:	68 94       	set
 1c8:	13 f8       	bld	r1, 3
 1ca:	b6 95       	lsr	r27
 1cc:	a7 95       	ror	r26
 1ce:	97 95       	ror	r25
 1d0:	87 95       	ror	r24
 1d2:	16 94       	lsr	r1
 1d4:	d1 f7       	brne	.-12     	; 0x1ca <UART_voidSetBaudRate+0x4c>
 1d6:	89 83       	std	Y+1, r24	; 0x01
 1d8:	9a 83       	std	Y+2, r25	; 0x02
 1da:	ab 83       	std	Y+3, r26	; 0x03
 1dc:	bc 83       	std	Y+4, r27	; 0x04
	BR -= 1 ;
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	9a 81       	ldd	r25, Y+2	; 0x02
 1e2:	ab 81       	ldd	r26, Y+3	; 0x03
 1e4:	bc 81       	ldd	r27, Y+4	; 0x04
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	a1 09       	sbc	r26, r1
 1ea:	b1 09       	sbc	r27, r1
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	9a 83       	std	Y+2, r25	; 0x02
 1f0:	ab 83       	std	Y+3, r26	; 0x03
 1f2:	bc 83       	std	Y+4, r27	; 0x04
	if(BR < 255)
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	9a 81       	ldd	r25, Y+2	; 0x02
 1f8:	ab 81       	ldd	r26, Y+3	; 0x03
 1fa:	bc 81       	ldd	r27, Y+4	; 0x04
 1fc:	8f 3f       	cpi	r24, 0xFF	; 255
 1fe:	91 05       	cpc	r25, r1
 200:	a1 05       	cpc	r26, r1
 202:	b1 05       	cpc	r27, r1
 204:	28 f4       	brcc	.+10     	; 0x210 <UART_voidSetBaudRate+0x92>
	{
		UBRRL = (u8)(BR) ;
 206:	e9 e2       	ldi	r30, 0x29	; 41
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	89 81       	ldd	r24, Y+1	; 0x01
 20c:	80 83       	st	Z, r24
 20e:	10 c0       	rjmp	.+32     	; 0x230 <UART_voidSetBaudRate+0xb2>

	}
	else
	{
		UBRRL = (u8)BR ;
 210:	e9 e2       	ldi	r30, 0x29	; 41
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	80 83       	st	Z, r24
		UBRRH = 0b00001111 & (BR >> 8) ;
 218:	e0 e4       	ldi	r30, 0x40	; 64
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	9a 81       	ldd	r25, Y+2	; 0x02
 220:	ab 81       	ldd	r26, Y+3	; 0x03
 222:	bc 81       	ldd	r27, Y+4	; 0x04
 224:	89 2f       	mov	r24, r25
 226:	9a 2f       	mov	r25, r26
 228:	ab 2f       	mov	r26, r27
 22a:	bb 27       	eor	r27, r27
 22c:	8f 70       	andi	r24, 0x0F	; 15
 22e:	80 83       	st	Z, r24
	}
}
 230:	28 96       	adiw	r28, 0x08	; 8
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	cf 91       	pop	r28
 23e:	df 91       	pop	r29
 240:	08 95       	ret

00000242 <UART_voidSendString>:

void UART_voidSendString (const u8 *Copy_StrPtr)
{
 242:	df 93       	push	r29
 244:	cf 93       	push	r28
 246:	00 d0       	rcall	.+0      	; 0x248 <UART_voidSendString+0x6>
 248:	cd b7       	in	r28, 0x3d	; 61
 24a:	de b7       	in	r29, 0x3e	; 62
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	0a c0       	rjmp	.+20     	; 0x266 <UART_voidSendString+0x24>
	while (*Copy_StrPtr != NULL)
	{
		UART_voidTransmitByte_synch(*Copy_StrPtr);
 252:	e9 81       	ldd	r30, Y+1	; 0x01
 254:	fa 81       	ldd	r31, Y+2	; 0x02
 256:	80 81       	ld	r24, Z
 258:	0e 94 8c 00 	call	0x118	; 0x118 <UART_voidTransmitByte_synch>
		Copy_StrPtr++;
 25c:	89 81       	ldd	r24, Y+1	; 0x01
 25e:	9a 81       	ldd	r25, Y+2	; 0x02
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	9a 83       	std	Y+2, r25	; 0x02
 264:	89 83       	std	Y+1, r24	; 0x01
	}
}

void UART_voidSendString (const u8 *Copy_StrPtr)
{
	while (*Copy_StrPtr != NULL)
 266:	e9 81       	ldd	r30, Y+1	; 0x01
 268:	fa 81       	ldd	r31, Y+2	; 0x02
 26a:	80 81       	ld	r24, Z
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	00 97       	sbiw	r24, 0x00	; 0
 272:	79 f7       	brne	.-34     	; 0x252 <UART_voidSendString+0x10>
	{
		UART_voidTransmitByte_synch(*Copy_StrPtr);
		Copy_StrPtr++;
	}
}
 274:	0f 90       	pop	r0
 276:	0f 90       	pop	r0
 278:	cf 91       	pop	r28
 27a:	df 91       	pop	r29
 27c:	08 95       	ret

0000027e <UART_voidRecString>:

void UART_voidRecString (u8 *Copy_StrPtr)
{
 27e:	df 93       	push	r29
 280:	cf 93       	push	r28
 282:	00 d0       	rcall	.+0      	; 0x284 <UART_voidRecString+0x6>
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	9a 83       	std	Y+2, r25	; 0x02
 28a:	89 83       	std	Y+1, r24	; 0x01
	do
	{
		*Copy_StrPtr = UART_voidRecieverByte_synch();
 28c:	0e 94 a6 00 	call	0x14c	; 0x14c <UART_voidRecieverByte_synch>
 290:	e9 81       	ldd	r30, Y+1	; 0x01
 292:	fa 81       	ldd	r31, Y+2	; 0x02
 294:	80 83       	st	Z, r24
		Copy_StrPtr++;
 296:	89 81       	ldd	r24, Y+1	; 0x01
 298:	9a 81       	ldd	r25, Y+2	; 0x02
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01
	}while ((*(Copy_StrPtr-1) != '\r') && (*(Copy_StrPtr-1) != '\n') );
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	fc 01       	movw	r30, r24
 2a6:	31 97       	sbiw	r30, 0x01	; 1
 2a8:	80 81       	ld	r24, Z
 2aa:	8d 30       	cpi	r24, 0x0D	; 13
 2ac:	39 f0       	breq	.+14     	; 0x2bc <UART_voidRecString+0x3e>
 2ae:	89 81       	ldd	r24, Y+1	; 0x01
 2b0:	9a 81       	ldd	r25, Y+2	; 0x02
 2b2:	fc 01       	movw	r30, r24
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	80 81       	ld	r24, Z
 2b8:	8a 30       	cpi	r24, 0x0A	; 10
 2ba:	41 f7       	brne	.-48     	; 0x28c <UART_voidRecString+0xe>
	*(Copy_StrPtr-1) = NULL;
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	9a 81       	ldd	r25, Y+2	; 0x02
 2c0:	fc 01       	movw	r30, r24
 2c2:	31 97       	sbiw	r30, 0x01	; 1
 2c4:	10 82       	st	Z, r1
}
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	cf 91       	pop	r28
 2cc:	df 91       	pop	r29
 2ce:	08 95       	ret

000002d0 <UART_voidRegisterCallback>:

void UART_voidRegisterCallback(u8 Copy_UART_Interrupt ,void (*fptr)(u8))
{
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	00 d0       	rcall	.+0      	; 0x2d6 <UART_voidRegisterCallback+0x6>
 2d6:	0f 92       	push	r0
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	89 83       	std	Y+1, r24	; 0x01
 2de:	7b 83       	std	Y+3, r23	; 0x03
 2e0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_UART_Interrupt)
 2e2:	89 81       	ldd	r24, Y+1	; 0x01
 2e4:	88 2f       	mov	r24, r24
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	00 97       	sbiw	r24, 0x00	; 0
 2ea:	31 f4       	brne	.+12     	; 0x2f8 <UART_voidRegisterCallback+0x28>
	{
	case 0 :
		UART_RX_COMPLETE_CallBack = fptr;
 2ec:	8a 81       	ldd	r24, Y+2	; 0x02
 2ee:	9b 81       	ldd	r25, Y+3	; 0x03
 2f0:	90 93 67 00 	sts	0x0067, r25
 2f4:	80 93 66 00 	sts	0x0066, r24
		break;
//	case 1 :
//		UART_TX_COMPLETE_CallBack = fptr ;
//		break;
	}
}
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	08 95       	ret

00000304 <__vector_13>:

void __vector_13(void) __attribute((signal));
void __vector_13(void)
{
 304:	1f 92       	push	r1
 306:	0f 92       	push	r0
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	0f 92       	push	r0
 30c:	11 24       	eor	r1, r1
 30e:	2f 93       	push	r18
 310:	3f 93       	push	r19
 312:	4f 93       	push	r20
 314:	5f 93       	push	r21
 316:	6f 93       	push	r22
 318:	7f 93       	push	r23
 31a:	8f 93       	push	r24
 31c:	9f 93       	push	r25
 31e:	af 93       	push	r26
 320:	bf 93       	push	r27
 322:	ef 93       	push	r30
 324:	ff 93       	push	r31
 326:	df 93       	push	r29
 328:	cf 93       	push	r28
 32a:	cd b7       	in	r28, 0x3d	; 61
 32c:	de b7       	in	r29, 0x3e	; 62
	if (UART_RX_COMPLETE_CallBack != NULL) {
 32e:	80 91 66 00 	lds	r24, 0x0066
 332:	90 91 67 00 	lds	r25, 0x0067
 336:	00 97       	sbiw	r24, 0x00	; 0
 338:	41 f0       	breq	.+16     	; 0x34a <__vector_13+0x46>
		UART_RX_COMPLETE_CallBack(UDR);
 33a:	e0 91 66 00 	lds	r30, 0x0066
 33e:	f0 91 67 00 	lds	r31, 0x0067
 342:	ac e2       	ldi	r26, 0x2C	; 44
 344:	b0 e0       	ldi	r27, 0x00	; 0
 346:	8c 91       	ld	r24, X
 348:	09 95       	icall
	}
}
 34a:	cf 91       	pop	r28
 34c:	df 91       	pop	r29
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <GIE_voidEnable>:
#include "GIE_Interface.h"
#include "GIE_Private.h"
#include "GIE_Config.h"

void GIE_voidEnable(void)
{
 370:	df 93       	push	r29
 372:	cf 93       	push	r28
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG , I_BIT);
 378:	af e5       	ldi	r26, 0x5F	; 95
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	ef e5       	ldi	r30, 0x5F	; 95
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	80 68       	ori	r24, 0x80	; 128
 384:	8c 93       	st	X, r24
}
 386:	cf 91       	pop	r28
 388:	df 91       	pop	r29
 38a:	08 95       	ret

0000038c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
 38c:	df 93       	push	r29
 38e:	cf 93       	push	r28
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG , I_BIT);
 394:	af e5       	ldi	r26, 0x5F	; 95
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	ef e5       	ldi	r30, 0x5F	; 95
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	8f 77       	andi	r24, 0x7F	; 127
 3a0:	8c 93       	st	X, r24
}
 3a2:	cf 91       	pop	r28
 3a4:	df 91       	pop	r29
 3a6:	08 95       	ret

000003a8 <DIO_voidSetPinDirection>:
#include "DIO_Interface.h"
#include "DIO_Private.h"


void DIO_voidSetPinDirection(u8 Copy_u8PortId , u8 Copy_u8PinNo , u8 Copy_u8Direction)
{
 3a8:	df 93       	push	r29
 3aa:	cf 93       	push	r28
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	27 97       	sbiw	r28, 0x07	; 7
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	89 83       	std	Y+1, r24	; 0x01
 3be:	6a 83       	std	Y+2, r22	; 0x02
 3c0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Direction == DIO_OUTPUT)
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	81 30       	cpi	r24, 0x01	; 1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <DIO_voidSetPinDirection+0x22>
 3c8:	6f c0       	rjmp	.+222    	; 0x4a8 <DIO_voidSetPinDirection+0x100>
	{
		switch(Copy_u8PortId)
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	28 2f       	mov	r18, r24
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	3f 83       	std	Y+7, r19	; 0x07
 3d2:	2e 83       	std	Y+6, r18	; 0x06
 3d4:	8e 81       	ldd	r24, Y+6	; 0x06
 3d6:	9f 81       	ldd	r25, Y+7	; 0x07
 3d8:	81 30       	cpi	r24, 0x01	; 1
 3da:	91 05       	cpc	r25, r1
 3dc:	49 f1       	breq	.+82     	; 0x430 <DIO_voidSetPinDirection+0x88>
 3de:	2e 81       	ldd	r18, Y+6	; 0x06
 3e0:	3f 81       	ldd	r19, Y+7	; 0x07
 3e2:	22 30       	cpi	r18, 0x02	; 2
 3e4:	31 05       	cpc	r19, r1
 3e6:	2c f4       	brge	.+10     	; 0x3f2 <DIO_voidSetPinDirection+0x4a>
 3e8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ea:	9f 81       	ldd	r25, Y+7	; 0x07
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	61 f0       	breq	.+24     	; 0x408 <DIO_voidSetPinDirection+0x60>
 3f0:	d2 c0       	rjmp	.+420    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
 3f2:	2e 81       	ldd	r18, Y+6	; 0x06
 3f4:	3f 81       	ldd	r19, Y+7	; 0x07
 3f6:	22 30       	cpi	r18, 0x02	; 2
 3f8:	31 05       	cpc	r19, r1
 3fa:	71 f1       	breq	.+92     	; 0x458 <DIO_voidSetPinDirection+0xb0>
 3fc:	8e 81       	ldd	r24, Y+6	; 0x06
 3fe:	9f 81       	ldd	r25, Y+7	; 0x07
 400:	83 30       	cpi	r24, 0x03	; 3
 402:	91 05       	cpc	r25, r1
 404:	e9 f1       	breq	.+122    	; 0x480 <DIO_voidSetPinDirection+0xd8>
 406:	c7 c0       	rjmp	.+398    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(DDRA , Copy_u8PinNo);
 408:	aa e3       	ldi	r26, 0x3A	; 58
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	ea e3       	ldi	r30, 0x3A	; 58
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	80 81       	ld	r24, Z
 412:	48 2f       	mov	r20, r24
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	28 2f       	mov	r18, r24
 418:	30 e0       	ldi	r19, 0x00	; 0
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 2e       	mov	r0, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_voidSetPinDirection+0x7e>
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	0a 94       	dec	r0
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_voidSetPinDirection+0x7a>
 42a:	84 2b       	or	r24, r20
 42c:	8c 93       	st	X, r24
 42e:	b3 c0       	rjmp	.+358    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(DDRB , Copy_u8PinNo);
 430:	a7 e3       	ldi	r26, 0x37	; 55
 432:	b0 e0       	ldi	r27, 0x00	; 0
 434:	e7 e3       	ldi	r30, 0x37	; 55
 436:	f0 e0       	ldi	r31, 0x00	; 0
 438:	80 81       	ld	r24, Z
 43a:	48 2f       	mov	r20, r24
 43c:	8a 81       	ldd	r24, Y+2	; 0x02
 43e:	28 2f       	mov	r18, r24
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 2e       	mov	r0, r18
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_voidSetPinDirection+0xa6>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_voidSetPinDirection+0xa2>
 452:	84 2b       	or	r24, r20
 454:	8c 93       	st	X, r24
 456:	9f c0       	rjmp	.+318    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(DDRC , Copy_u8PinNo);
 458:	a4 e3       	ldi	r26, 0x34	; 52
 45a:	b0 e0       	ldi	r27, 0x00	; 0
 45c:	e4 e3       	ldi	r30, 0x34	; 52
 45e:	f0 e0       	ldi	r31, 0x00	; 0
 460:	80 81       	ld	r24, Z
 462:	48 2f       	mov	r20, r24
 464:	8a 81       	ldd	r24, Y+2	; 0x02
 466:	28 2f       	mov	r18, r24
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	81 e0       	ldi	r24, 0x01	; 1
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	02 2e       	mov	r0, r18
 470:	02 c0       	rjmp	.+4      	; 0x476 <DIO_voidSetPinDirection+0xce>
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <DIO_voidSetPinDirection+0xca>
 47a:	84 2b       	or	r24, r20
 47c:	8c 93       	st	X, r24
 47e:	8b c0       	rjmp	.+278    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(DDRD , Copy_u8PinNo);
 480:	a1 e3       	ldi	r26, 0x31	; 49
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e1 e3       	ldi	r30, 0x31	; 49
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <DIO_voidSetPinDirection+0xf6>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <DIO_voidSetPinDirection+0xf2>
 4a2:	84 2b       	or	r24, r20
 4a4:	8c 93       	st	X, r24
 4a6:	77 c0       	rjmp	.+238    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		}
	}
	else if (Copy_u8Direction == DIO_INPUT)
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	88 23       	and	r24, r24
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <DIO_voidSetPinDirection+0x108>
 4ae:	73 c0       	rjmp	.+230    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
	{
		switch(Copy_u8PortId)
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	3d 83       	std	Y+5, r19	; 0x05
 4b8:	2c 83       	std	Y+4, r18	; 0x04
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	91 05       	cpc	r25, r1
 4c2:	59 f1       	breq	.+86     	; 0x51a <DIO_voidSetPinDirection+0x172>
 4c4:	2c 81       	ldd	r18, Y+4	; 0x04
 4c6:	3d 81       	ldd	r19, Y+5	; 0x05
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	31 05       	cpc	r19, r1
 4cc:	2c f4       	brge	.+10     	; 0x4d8 <DIO_voidSetPinDirection+0x130>
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	69 f0       	breq	.+26     	; 0x4f0 <DIO_voidSetPinDirection+0x148>
 4d6:	5f c0       	rjmp	.+190    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
 4d8:	2c 81       	ldd	r18, Y+4	; 0x04
 4da:	3d 81       	ldd	r19, Y+5	; 0x05
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	89 f1       	breq	.+98     	; 0x544 <DIO_voidSetPinDirection+0x19c>
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	91 05       	cpc	r25, r1
 4ea:	09 f4       	brne	.+2      	; 0x4ee <DIO_voidSetPinDirection+0x146>
 4ec:	40 c0       	rjmp	.+128    	; 0x56e <DIO_voidSetPinDirection+0x1c6>
 4ee:	53 c0       	rjmp	.+166    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(DDRA , Copy_u8PinNo);
 4f0:	aa e3       	ldi	r26, 0x3A	; 58
 4f2:	b0 e0       	ldi	r27, 0x00	; 0
 4f4:	ea e3       	ldi	r30, 0x3A	; 58
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	48 2f       	mov	r20, r24
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	28 2f       	mov	r18, r24
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 2e       	mov	r0, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_voidSetPinDirection+0x166>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	0a 94       	dec	r0
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_voidSetPinDirection+0x162>
 512:	80 95       	com	r24
 514:	84 23       	and	r24, r20
 516:	8c 93       	st	X, r24
 518:	3e c0       	rjmp	.+124    	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(DDRB , Copy_u8PinNo);
 51a:	a7 e3       	ldi	r26, 0x37	; 55
 51c:	b0 e0       	ldi	r27, 0x00	; 0
 51e:	e7 e3       	ldi	r30, 0x37	; 55
 520:	f0 e0       	ldi	r31, 0x00	; 0
 522:	80 81       	ld	r24, Z
 524:	48 2f       	mov	r20, r24
 526:	8a 81       	ldd	r24, Y+2	; 0x02
 528:	28 2f       	mov	r18, r24
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 2e       	mov	r0, r18
 532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_voidSetPinDirection+0x190>
 534:	88 0f       	add	r24, r24
 536:	99 1f       	adc	r25, r25
 538:	0a 94       	dec	r0
 53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_voidSetPinDirection+0x18c>
 53c:	80 95       	com	r24
 53e:	84 23       	and	r24, r20
 540:	8c 93       	st	X, r24
 542:	29 c0       	rjmp	.+82     	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(DDRC , Copy_u8PinNo);
 544:	a4 e3       	ldi	r26, 0x34	; 52
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e4 e3       	ldi	r30, 0x34	; 52
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	48 2f       	mov	r20, r24
 550:	8a 81       	ldd	r24, Y+2	; 0x02
 552:	28 2f       	mov	r18, r24
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 2e       	mov	r0, r18
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_voidSetPinDirection+0x1ba>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	0a 94       	dec	r0
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_voidSetPinDirection+0x1b6>
 566:	80 95       	com	r24
 568:	84 23       	and	r24, r20
 56a:	8c 93       	st	X, r24
 56c:	14 c0       	rjmp	.+40     	; 0x596 <DIO_voidSetPinDirection+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(DDRD , Copy_u8PinNo);
 56e:	a1 e3       	ldi	r26, 0x31	; 49
 570:	b0 e0       	ldi	r27, 0x00	; 0
 572:	e1 e3       	ldi	r30, 0x31	; 49
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	80 81       	ld	r24, Z
 578:	48 2f       	mov	r20, r24
 57a:	8a 81       	ldd	r24, Y+2	; 0x02
 57c:	28 2f       	mov	r18, r24
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 2e       	mov	r0, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_voidSetPinDirection+0x1e4>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	0a 94       	dec	r0
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_voidSetPinDirection+0x1e0>
 590:	80 95       	com	r24
 592:	84 23       	and	r24, r20
 594:	8c 93       	st	X, r24
			break;
		}
	}
}
 596:	27 96       	adiw	r28, 0x07	; 7
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	f8 94       	cli
 59c:	de bf       	out	0x3e, r29	; 62
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	cd bf       	out	0x3d, r28	; 61
 5a2:	cf 91       	pop	r28
 5a4:	df 91       	pop	r29
 5a6:	08 95       	ret

000005a8 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinNo , u8 Copy_u8Value)
{
 5a8:	df 93       	push	r29
 5aa:	cf 93       	push	r28
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
 5b0:	27 97       	sbiw	r28, 0x07	; 7
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	f8 94       	cli
 5b6:	de bf       	out	0x3e, r29	; 62
 5b8:	0f be       	out	0x3f, r0	; 63
 5ba:	cd bf       	out	0x3d, r28	; 61
 5bc:	89 83       	std	Y+1, r24	; 0x01
 5be:	6a 83       	std	Y+2, r22	; 0x02
 5c0:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Value == DIO_HIGH)
 5c2:	8b 81       	ldd	r24, Y+3	; 0x03
 5c4:	81 30       	cpi	r24, 0x01	; 1
 5c6:	09 f0       	breq	.+2      	; 0x5ca <DIO_voidSetPinValue+0x22>
 5c8:	6f c0       	rjmp	.+222    	; 0x6a8 <DIO_voidSetPinValue+0x100>
	{
		switch(Copy_u8PortId)
 5ca:	89 81       	ldd	r24, Y+1	; 0x01
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	3f 83       	std	Y+7, r19	; 0x07
 5d2:	2e 83       	std	Y+6, r18	; 0x06
 5d4:	8e 81       	ldd	r24, Y+6	; 0x06
 5d6:	9f 81       	ldd	r25, Y+7	; 0x07
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	91 05       	cpc	r25, r1
 5dc:	49 f1       	breq	.+82     	; 0x630 <DIO_voidSetPinValue+0x88>
 5de:	2e 81       	ldd	r18, Y+6	; 0x06
 5e0:	3f 81       	ldd	r19, Y+7	; 0x07
 5e2:	22 30       	cpi	r18, 0x02	; 2
 5e4:	31 05       	cpc	r19, r1
 5e6:	2c f4       	brge	.+10     	; 0x5f2 <DIO_voidSetPinValue+0x4a>
 5e8:	8e 81       	ldd	r24, Y+6	; 0x06
 5ea:	9f 81       	ldd	r25, Y+7	; 0x07
 5ec:	00 97       	sbiw	r24, 0x00	; 0
 5ee:	61 f0       	breq	.+24     	; 0x608 <DIO_voidSetPinValue+0x60>
 5f0:	d2 c0       	rjmp	.+420    	; 0x796 <DIO_voidSetPinValue+0x1ee>
 5f2:	2e 81       	ldd	r18, Y+6	; 0x06
 5f4:	3f 81       	ldd	r19, Y+7	; 0x07
 5f6:	22 30       	cpi	r18, 0x02	; 2
 5f8:	31 05       	cpc	r19, r1
 5fa:	71 f1       	breq	.+92     	; 0x658 <DIO_voidSetPinValue+0xb0>
 5fc:	8e 81       	ldd	r24, Y+6	; 0x06
 5fe:	9f 81       	ldd	r25, Y+7	; 0x07
 600:	83 30       	cpi	r24, 0x03	; 3
 602:	91 05       	cpc	r25, r1
 604:	e9 f1       	breq	.+122    	; 0x680 <DIO_voidSetPinValue+0xd8>
 606:	c7 c0       	rjmp	.+398    	; 0x796 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			SET_BIT(PORTA , Copy_u8PinNo);
 608:	ab e3       	ldi	r26, 0x3B	; 59
 60a:	b0 e0       	ldi	r27, 0x00	; 0
 60c:	eb e3       	ldi	r30, 0x3B	; 59
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	48 2f       	mov	r20, r24
 614:	8a 81       	ldd	r24, Y+2	; 0x02
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 2e       	mov	r0, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_voidSetPinValue+0x7e>
 622:	88 0f       	add	r24, r24
 624:	99 1f       	adc	r25, r25
 626:	0a 94       	dec	r0
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_voidSetPinValue+0x7a>
 62a:	84 2b       	or	r24, r20
 62c:	8c 93       	st	X, r24
 62e:	b3 c0       	rjmp	.+358    	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			SET_BIT(PORTB , Copy_u8PinNo);
 630:	a8 e3       	ldi	r26, 0x38	; 56
 632:	b0 e0       	ldi	r27, 0x00	; 0
 634:	e8 e3       	ldi	r30, 0x38	; 56
 636:	f0 e0       	ldi	r31, 0x00	; 0
 638:	80 81       	ld	r24, Z
 63a:	48 2f       	mov	r20, r24
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 2e       	mov	r0, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_voidSetPinValue+0xa6>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	0a 94       	dec	r0
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_voidSetPinValue+0xa2>
 652:	84 2b       	or	r24, r20
 654:	8c 93       	st	X, r24
 656:	9f c0       	rjmp	.+318    	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			SET_BIT(PORTC , Copy_u8PinNo);
 658:	a5 e3       	ldi	r26, 0x35	; 53
 65a:	b0 e0       	ldi	r27, 0x00	; 0
 65c:	e5 e3       	ldi	r30, 0x35	; 53
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	48 2f       	mov	r20, r24
 664:	8a 81       	ldd	r24, Y+2	; 0x02
 666:	28 2f       	mov	r18, r24
 668:	30 e0       	ldi	r19, 0x00	; 0
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 2e       	mov	r0, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_voidSetPinValue+0xce>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	0a 94       	dec	r0
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_voidSetPinValue+0xca>
 67a:	84 2b       	or	r24, r20
 67c:	8c 93       	st	X, r24
 67e:	8b c0       	rjmp	.+278    	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			SET_BIT(PORTD , Copy_u8PinNo);
 680:	a2 e3       	ldi	r26, 0x32	; 50
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	e2 e3       	ldi	r30, 0x32	; 50
 686:	f0 e0       	ldi	r31, 0x00	; 0
 688:	80 81       	ld	r24, Z
 68a:	48 2f       	mov	r20, r24
 68c:	8a 81       	ldd	r24, Y+2	; 0x02
 68e:	28 2f       	mov	r18, r24
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 2e       	mov	r0, r18
 698:	02 c0       	rjmp	.+4      	; 0x69e <DIO_voidSetPinValue+0xf6>
 69a:	88 0f       	add	r24, r24
 69c:	99 1f       	adc	r25, r25
 69e:	0a 94       	dec	r0
 6a0:	e2 f7       	brpl	.-8      	; 0x69a <DIO_voidSetPinValue+0xf2>
 6a2:	84 2b       	or	r24, r20
 6a4:	8c 93       	st	X, r24
 6a6:	77 c0       	rjmp	.+238    	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		}
	}
	else if (Copy_u8Value == DIO_LOW)
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	88 23       	and	r24, r24
 6ac:	09 f0       	breq	.+2      	; 0x6b0 <DIO_voidSetPinValue+0x108>
 6ae:	73 c0       	rjmp	.+230    	; 0x796 <DIO_voidSetPinValue+0x1ee>
	{
		switch(Copy_u8PortId)
 6b0:	89 81       	ldd	r24, Y+1	; 0x01
 6b2:	28 2f       	mov	r18, r24
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	3d 83       	std	Y+5, r19	; 0x05
 6b8:	2c 83       	std	Y+4, r18	; 0x04
 6ba:	8c 81       	ldd	r24, Y+4	; 0x04
 6bc:	9d 81       	ldd	r25, Y+5	; 0x05
 6be:	81 30       	cpi	r24, 0x01	; 1
 6c0:	91 05       	cpc	r25, r1
 6c2:	59 f1       	breq	.+86     	; 0x71a <DIO_voidSetPinValue+0x172>
 6c4:	2c 81       	ldd	r18, Y+4	; 0x04
 6c6:	3d 81       	ldd	r19, Y+5	; 0x05
 6c8:	22 30       	cpi	r18, 0x02	; 2
 6ca:	31 05       	cpc	r19, r1
 6cc:	2c f4       	brge	.+10     	; 0x6d8 <DIO_voidSetPinValue+0x130>
 6ce:	8c 81       	ldd	r24, Y+4	; 0x04
 6d0:	9d 81       	ldd	r25, Y+5	; 0x05
 6d2:	00 97       	sbiw	r24, 0x00	; 0
 6d4:	69 f0       	breq	.+26     	; 0x6f0 <DIO_voidSetPinValue+0x148>
 6d6:	5f c0       	rjmp	.+190    	; 0x796 <DIO_voidSetPinValue+0x1ee>
 6d8:	2c 81       	ldd	r18, Y+4	; 0x04
 6da:	3d 81       	ldd	r19, Y+5	; 0x05
 6dc:	22 30       	cpi	r18, 0x02	; 2
 6de:	31 05       	cpc	r19, r1
 6e0:	89 f1       	breq	.+98     	; 0x744 <DIO_voidSetPinValue+0x19c>
 6e2:	8c 81       	ldd	r24, Y+4	; 0x04
 6e4:	9d 81       	ldd	r25, Y+5	; 0x05
 6e6:	83 30       	cpi	r24, 0x03	; 3
 6e8:	91 05       	cpc	r25, r1
 6ea:	09 f4       	brne	.+2      	; 0x6ee <DIO_voidSetPinValue+0x146>
 6ec:	40 c0       	rjmp	.+128    	; 0x76e <DIO_voidSetPinValue+0x1c6>
 6ee:	53 c0       	rjmp	.+166    	; 0x796 <DIO_voidSetPinValue+0x1ee>
		{
		case DIO_PORTA:
			CLR_BIT(PORTA , Copy_u8PinNo);
 6f0:	ab e3       	ldi	r26, 0x3B	; 59
 6f2:	b0 e0       	ldi	r27, 0x00	; 0
 6f4:	eb e3       	ldi	r30, 0x3B	; 59
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	80 81       	ld	r24, Z
 6fa:	48 2f       	mov	r20, r24
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	28 2f       	mov	r18, r24
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 2e       	mov	r0, r18
 708:	02 c0       	rjmp	.+4      	; 0x70e <DIO_voidSetPinValue+0x166>
 70a:	88 0f       	add	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	0a 94       	dec	r0
 710:	e2 f7       	brpl	.-8      	; 0x70a <DIO_voidSetPinValue+0x162>
 712:	80 95       	com	r24
 714:	84 23       	and	r24, r20
 716:	8c 93       	st	X, r24
 718:	3e c0       	rjmp	.+124    	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTB:
			CLR_BIT(PORTB , Copy_u8PinNo);
 71a:	a8 e3       	ldi	r26, 0x38	; 56
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	e8 e3       	ldi	r30, 0x38	; 56
 720:	f0 e0       	ldi	r31, 0x00	; 0
 722:	80 81       	ld	r24, Z
 724:	48 2f       	mov	r20, r24
 726:	8a 81       	ldd	r24, Y+2	; 0x02
 728:	28 2f       	mov	r18, r24
 72a:	30 e0       	ldi	r19, 0x00	; 0
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 2e       	mov	r0, r18
 732:	02 c0       	rjmp	.+4      	; 0x738 <DIO_voidSetPinValue+0x190>
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	0a 94       	dec	r0
 73a:	e2 f7       	brpl	.-8      	; 0x734 <DIO_voidSetPinValue+0x18c>
 73c:	80 95       	com	r24
 73e:	84 23       	and	r24, r20
 740:	8c 93       	st	X, r24
 742:	29 c0       	rjmp	.+82     	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTC:
			CLR_BIT(PORTC , Copy_u8PinNo);
 744:	a5 e3       	ldi	r26, 0x35	; 53
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e5 e3       	ldi	r30, 0x35	; 53
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	48 2f       	mov	r20, r24
 750:	8a 81       	ldd	r24, Y+2	; 0x02
 752:	28 2f       	mov	r18, r24
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 2e       	mov	r0, r18
 75c:	02 c0       	rjmp	.+4      	; 0x762 <DIO_voidSetPinValue+0x1ba>
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	0a 94       	dec	r0
 764:	e2 f7       	brpl	.-8      	; 0x75e <DIO_voidSetPinValue+0x1b6>
 766:	80 95       	com	r24
 768:	84 23       	and	r24, r20
 76a:	8c 93       	st	X, r24
 76c:	14 c0       	rjmp	.+40     	; 0x796 <DIO_voidSetPinValue+0x1ee>
			break;
		case DIO_PORTD:
			CLR_BIT(PORTD , Copy_u8PinNo);
 76e:	a2 e3       	ldi	r26, 0x32	; 50
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	e2 e3       	ldi	r30, 0x32	; 50
 774:	f0 e0       	ldi	r31, 0x00	; 0
 776:	80 81       	ld	r24, Z
 778:	48 2f       	mov	r20, r24
 77a:	8a 81       	ldd	r24, Y+2	; 0x02
 77c:	28 2f       	mov	r18, r24
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	81 e0       	ldi	r24, 0x01	; 1
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	02 2e       	mov	r0, r18
 786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_voidSetPinValue+0x1e4>
 788:	88 0f       	add	r24, r24
 78a:	99 1f       	adc	r25, r25
 78c:	0a 94       	dec	r0
 78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_voidSetPinValue+0x1e0>
 790:	80 95       	com	r24
 792:	84 23       	and	r24, r20
 794:	8c 93       	st	X, r24
			break;
		}
	}
}
 796:	27 96       	adiw	r28, 0x07	; 7
 798:	0f b6       	in	r0, 0x3f	; 63
 79a:	f8 94       	cli
 79c:	de bf       	out	0x3e, r29	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	cd bf       	out	0x3d, r28	; 61
 7a2:	cf 91       	pop	r28
 7a4:	df 91       	pop	r29
 7a6:	08 95       	ret

000007a8 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId , u8 Copy_u8PinNo)
{
 7a8:	df 93       	push	r29
 7aa:	cf 93       	push	r28
 7ac:	00 d0       	rcall	.+0      	; 0x7ae <DIO_u8GetPinValue+0x6>
 7ae:	00 d0       	rcall	.+0      	; 0x7b0 <DIO_u8GetPinValue+0x8>
 7b0:	0f 92       	push	r0
 7b2:	cd b7       	in	r28, 0x3d	; 61
 7b4:	de b7       	in	r29, 0x3e	; 62
 7b6:	8a 83       	std	Y+2, r24	; 0x02
 7b8:	6b 83       	std	Y+3, r22	; 0x03
	u8 L_u8inValue = 0;
 7ba:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortId)
 7bc:	8a 81       	ldd	r24, Y+2	; 0x02
 7be:	28 2f       	mov	r18, r24
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	3d 83       	std	Y+5, r19	; 0x05
 7c4:	2c 83       	std	Y+4, r18	; 0x04
 7c6:	4c 81       	ldd	r20, Y+4	; 0x04
 7c8:	5d 81       	ldd	r21, Y+5	; 0x05
 7ca:	41 30       	cpi	r20, 0x01	; 1
 7cc:	51 05       	cpc	r21, r1
 7ce:	41 f1       	breq	.+80     	; 0x820 <DIO_u8GetPinValue+0x78>
 7d0:	8c 81       	ldd	r24, Y+4	; 0x04
 7d2:	9d 81       	ldd	r25, Y+5	; 0x05
 7d4:	82 30       	cpi	r24, 0x02	; 2
 7d6:	91 05       	cpc	r25, r1
 7d8:	34 f4       	brge	.+12     	; 0x7e6 <DIO_u8GetPinValue+0x3e>
 7da:	2c 81       	ldd	r18, Y+4	; 0x04
 7dc:	3d 81       	ldd	r19, Y+5	; 0x05
 7de:	21 15       	cp	r18, r1
 7e0:	31 05       	cpc	r19, r1
 7e2:	61 f0       	breq	.+24     	; 0x7fc <DIO_u8GetPinValue+0x54>
 7e4:	52 c0       	rjmp	.+164    	; 0x88a <__stack+0x2b>
 7e6:	4c 81       	ldd	r20, Y+4	; 0x04
 7e8:	5d 81       	ldd	r21, Y+5	; 0x05
 7ea:	42 30       	cpi	r20, 0x02	; 2
 7ec:	51 05       	cpc	r21, r1
 7ee:	51 f1       	breq	.+84     	; 0x844 <DIO_u8GetPinValue+0x9c>
 7f0:	8c 81       	ldd	r24, Y+4	; 0x04
 7f2:	9d 81       	ldd	r25, Y+5	; 0x05
 7f4:	83 30       	cpi	r24, 0x03	; 3
 7f6:	91 05       	cpc	r25, r1
 7f8:	b9 f1       	breq	.+110    	; 0x868 <__stack+0x9>
 7fa:	47 c0       	rjmp	.+142    	; 0x88a <__stack+0x2b>
	{
	case DIO_PORTA:
		L_u8inValue = GET_BIT(PINA , Copy_u8PinNo);
 7fc:	e9 e3       	ldi	r30, 0x39	; 57
 7fe:	f0 e0       	ldi	r31, 0x00	; 0
 800:	80 81       	ld	r24, Z
 802:	28 2f       	mov	r18, r24
 804:	30 e0       	ldi	r19, 0x00	; 0
 806:	8b 81       	ldd	r24, Y+3	; 0x03
 808:	88 2f       	mov	r24, r24
 80a:	90 e0       	ldi	r25, 0x00	; 0
 80c:	a9 01       	movw	r20, r18
 80e:	02 c0       	rjmp	.+4      	; 0x814 <DIO_u8GetPinValue+0x6c>
 810:	55 95       	asr	r21
 812:	47 95       	ror	r20
 814:	8a 95       	dec	r24
 816:	e2 f7       	brpl	.-8      	; 0x810 <DIO_u8GetPinValue+0x68>
 818:	ca 01       	movw	r24, r20
 81a:	81 70       	andi	r24, 0x01	; 1
 81c:	89 83       	std	Y+1, r24	; 0x01
 81e:	35 c0       	rjmp	.+106    	; 0x88a <__stack+0x2b>
		break;
	case DIO_PORTB:
		L_u8inValue = GET_BIT(PINB , Copy_u8PinNo);
 820:	e6 e3       	ldi	r30, 0x36	; 54
 822:	f0 e0       	ldi	r31, 0x00	; 0
 824:	80 81       	ld	r24, Z
 826:	28 2f       	mov	r18, r24
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	8b 81       	ldd	r24, Y+3	; 0x03
 82c:	88 2f       	mov	r24, r24
 82e:	90 e0       	ldi	r25, 0x00	; 0
 830:	a9 01       	movw	r20, r18
 832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_u8GetPinValue+0x90>
 834:	55 95       	asr	r21
 836:	47 95       	ror	r20
 838:	8a 95       	dec	r24
 83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_u8GetPinValue+0x8c>
 83c:	ca 01       	movw	r24, r20
 83e:	81 70       	andi	r24, 0x01	; 1
 840:	89 83       	std	Y+1, r24	; 0x01
 842:	23 c0       	rjmp	.+70     	; 0x88a <__stack+0x2b>
		break;
	case DIO_PORTC:
		L_u8inValue = GET_BIT(PINC , Copy_u8PinNo);
 844:	e3 e3       	ldi	r30, 0x33	; 51
 846:	f0 e0       	ldi	r31, 0x00	; 0
 848:	80 81       	ld	r24, Z
 84a:	28 2f       	mov	r18, r24
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	8b 81       	ldd	r24, Y+3	; 0x03
 850:	88 2f       	mov	r24, r24
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	a9 01       	movw	r20, r18
 856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_u8GetPinValue+0xb4>
 858:	55 95       	asr	r21
 85a:	47 95       	ror	r20
 85c:	8a 95       	dec	r24
 85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_u8GetPinValue+0xb0>
 860:	ca 01       	movw	r24, r20
 862:	81 70       	andi	r24, 0x01	; 1
 864:	89 83       	std	Y+1, r24	; 0x01
 866:	11 c0       	rjmp	.+34     	; 0x88a <__stack+0x2b>
		break;
	case DIO_PORTD:
		L_u8inValue = GET_BIT(PIND , Copy_u8PinNo);
 868:	e0 e3       	ldi	r30, 0x30	; 48
 86a:	f0 e0       	ldi	r31, 0x00	; 0
 86c:	80 81       	ld	r24, Z
 86e:	28 2f       	mov	r18, r24
 870:	30 e0       	ldi	r19, 0x00	; 0
 872:	8b 81       	ldd	r24, Y+3	; 0x03
 874:	88 2f       	mov	r24, r24
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	a9 01       	movw	r20, r18
 87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
 87c:	55 95       	asr	r21
 87e:	47 95       	ror	r20
 880:	8a 95       	dec	r24
 882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
 884:	ca 01       	movw	r24, r20
 886:	81 70       	andi	r24, 0x01	; 1
 888:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return L_u8inValue ;
 88a:	89 81       	ldd	r24, Y+1	; 0x01
}
 88c:	0f 90       	pop	r0
 88e:	0f 90       	pop	r0
 890:	0f 90       	pop	r0
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	cf 91       	pop	r28
 898:	df 91       	pop	r29
 89a:	08 95       	ret

0000089c <DIO_voidTogglePin>:

void DIO_voidTogglePin(u8 Copy_u8PortId , u8 Copy_u8PinNo)
{
 89c:	df 93       	push	r29
 89e:	cf 93       	push	r28
 8a0:	00 d0       	rcall	.+0      	; 0x8a2 <DIO_voidTogglePin+0x6>
 8a2:	00 d0       	rcall	.+0      	; 0x8a4 <DIO_voidTogglePin+0x8>
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
 8a8:	89 83       	std	Y+1, r24	; 0x01
 8aa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	28 2f       	mov	r18, r24
 8b0:	30 e0       	ldi	r19, 0x00	; 0
 8b2:	3c 83       	std	Y+4, r19	; 0x04
 8b4:	2b 83       	std	Y+3, r18	; 0x03
 8b6:	8b 81       	ldd	r24, Y+3	; 0x03
 8b8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ba:	81 30       	cpi	r24, 0x01	; 1
 8bc:	91 05       	cpc	r25, r1
 8be:	49 f1       	breq	.+82     	; 0x912 <DIO_voidTogglePin+0x76>
 8c0:	2b 81       	ldd	r18, Y+3	; 0x03
 8c2:	3c 81       	ldd	r19, Y+4	; 0x04
 8c4:	22 30       	cpi	r18, 0x02	; 2
 8c6:	31 05       	cpc	r19, r1
 8c8:	2c f4       	brge	.+10     	; 0x8d4 <DIO_voidTogglePin+0x38>
 8ca:	8b 81       	ldd	r24, Y+3	; 0x03
 8cc:	9c 81       	ldd	r25, Y+4	; 0x04
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	61 f0       	breq	.+24     	; 0x8ea <DIO_voidTogglePin+0x4e>
 8d2:	5a c0       	rjmp	.+180    	; 0x988 <DIO_voidTogglePin+0xec>
 8d4:	2b 81       	ldd	r18, Y+3	; 0x03
 8d6:	3c 81       	ldd	r19, Y+4	; 0x04
 8d8:	22 30       	cpi	r18, 0x02	; 2
 8da:	31 05       	cpc	r19, r1
 8dc:	71 f1       	breq	.+92     	; 0x93a <DIO_voidTogglePin+0x9e>
 8de:	8b 81       	ldd	r24, Y+3	; 0x03
 8e0:	9c 81       	ldd	r25, Y+4	; 0x04
 8e2:	83 30       	cpi	r24, 0x03	; 3
 8e4:	91 05       	cpc	r25, r1
 8e6:	e9 f1       	breq	.+122    	; 0x962 <DIO_voidTogglePin+0xc6>
 8e8:	4f c0       	rjmp	.+158    	; 0x988 <DIO_voidTogglePin+0xec>
	{
	case DIO_PORTA:
		TOG_BIT(PORTA , Copy_u8PinNo);
 8ea:	ab e3       	ldi	r26, 0x3B	; 59
 8ec:	b0 e0       	ldi	r27, 0x00	; 0
 8ee:	eb e3       	ldi	r30, 0x3B	; 59
 8f0:	f0 e0       	ldi	r31, 0x00	; 0
 8f2:	80 81       	ld	r24, Z
 8f4:	48 2f       	mov	r20, r24
 8f6:	8a 81       	ldd	r24, Y+2	; 0x02
 8f8:	28 2f       	mov	r18, r24
 8fa:	30 e0       	ldi	r19, 0x00	; 0
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 2e       	mov	r0, r18
 902:	02 c0       	rjmp	.+4      	; 0x908 <DIO_voidTogglePin+0x6c>
 904:	88 0f       	add	r24, r24
 906:	99 1f       	adc	r25, r25
 908:	0a 94       	dec	r0
 90a:	e2 f7       	brpl	.-8      	; 0x904 <DIO_voidTogglePin+0x68>
 90c:	84 27       	eor	r24, r20
 90e:	8c 93       	st	X, r24
 910:	3b c0       	rjmp	.+118    	; 0x988 <DIO_voidTogglePin+0xec>
		break;
	case DIO_PORTB:
		TOG_BIT(PORTB , Copy_u8PinNo);
 912:	a8 e3       	ldi	r26, 0x38	; 56
 914:	b0 e0       	ldi	r27, 0x00	; 0
 916:	e8 e3       	ldi	r30, 0x38	; 56
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	80 81       	ld	r24, Z
 91c:	48 2f       	mov	r20, r24
 91e:	8a 81       	ldd	r24, Y+2	; 0x02
 920:	28 2f       	mov	r18, r24
 922:	30 e0       	ldi	r19, 0x00	; 0
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	02 2e       	mov	r0, r18
 92a:	02 c0       	rjmp	.+4      	; 0x930 <DIO_voidTogglePin+0x94>
 92c:	88 0f       	add	r24, r24
 92e:	99 1f       	adc	r25, r25
 930:	0a 94       	dec	r0
 932:	e2 f7       	brpl	.-8      	; 0x92c <DIO_voidTogglePin+0x90>
 934:	84 27       	eor	r24, r20
 936:	8c 93       	st	X, r24
 938:	27 c0       	rjmp	.+78     	; 0x988 <DIO_voidTogglePin+0xec>
		break;
	case DIO_PORTC:
		TOG_BIT(PORTC , Copy_u8PinNo);
 93a:	a5 e3       	ldi	r26, 0x35	; 53
 93c:	b0 e0       	ldi	r27, 0x00	; 0
 93e:	e5 e3       	ldi	r30, 0x35	; 53
 940:	f0 e0       	ldi	r31, 0x00	; 0
 942:	80 81       	ld	r24, Z
 944:	48 2f       	mov	r20, r24
 946:	8a 81       	ldd	r24, Y+2	; 0x02
 948:	28 2f       	mov	r18, r24
 94a:	30 e0       	ldi	r19, 0x00	; 0
 94c:	81 e0       	ldi	r24, 0x01	; 1
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	02 2e       	mov	r0, r18
 952:	02 c0       	rjmp	.+4      	; 0x958 <DIO_voidTogglePin+0xbc>
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	0a 94       	dec	r0
 95a:	e2 f7       	brpl	.-8      	; 0x954 <DIO_voidTogglePin+0xb8>
 95c:	84 27       	eor	r24, r20
 95e:	8c 93       	st	X, r24
 960:	13 c0       	rjmp	.+38     	; 0x988 <DIO_voidTogglePin+0xec>
		break;
	case DIO_PORTD:
		TOG_BIT(PORTD , Copy_u8PinNo);
 962:	a2 e3       	ldi	r26, 0x32	; 50
 964:	b0 e0       	ldi	r27, 0x00	; 0
 966:	e2 e3       	ldi	r30, 0x32	; 50
 968:	f0 e0       	ldi	r31, 0x00	; 0
 96a:	80 81       	ld	r24, Z
 96c:	48 2f       	mov	r20, r24
 96e:	8a 81       	ldd	r24, Y+2	; 0x02
 970:	28 2f       	mov	r18, r24
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	90 e0       	ldi	r25, 0x00	; 0
 978:	02 2e       	mov	r0, r18
 97a:	02 c0       	rjmp	.+4      	; 0x980 <DIO_voidTogglePin+0xe4>
 97c:	88 0f       	add	r24, r24
 97e:	99 1f       	adc	r25, r25
 980:	0a 94       	dec	r0
 982:	e2 f7       	brpl	.-8      	; 0x97c <DIO_voidTogglePin+0xe0>
 984:	84 27       	eor	r24, r20
 986:	8c 93       	st	X, r24
		break;
	}
}
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection(u8 Copy_u8PortId , u8 Copy_u8Direction)
{
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	00 d0       	rcall	.+0      	; 0x99c <DIO_voidSetPortDirection+0x6>
 99c:	00 d0       	rcall	.+0      	; 0x99e <DIO_voidSetPortDirection+0x8>
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
 9a2:	89 83       	std	Y+1, r24	; 0x01
 9a4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	28 2f       	mov	r18, r24
 9aa:	30 e0       	ldi	r19, 0x00	; 0
 9ac:	3c 83       	std	Y+4, r19	; 0x04
 9ae:	2b 83       	std	Y+3, r18	; 0x03
 9b0:	8b 81       	ldd	r24, Y+3	; 0x03
 9b2:	9c 81       	ldd	r25, Y+4	; 0x04
 9b4:	81 30       	cpi	r24, 0x01	; 1
 9b6:	91 05       	cpc	r25, r1
 9b8:	d1 f0       	breq	.+52     	; 0x9ee <DIO_voidSetPortDirection+0x58>
 9ba:	2b 81       	ldd	r18, Y+3	; 0x03
 9bc:	3c 81       	ldd	r19, Y+4	; 0x04
 9be:	22 30       	cpi	r18, 0x02	; 2
 9c0:	31 05       	cpc	r19, r1
 9c2:	2c f4       	brge	.+10     	; 0x9ce <DIO_voidSetPortDirection+0x38>
 9c4:	8b 81       	ldd	r24, Y+3	; 0x03
 9c6:	9c 81       	ldd	r25, Y+4	; 0x04
 9c8:	00 97       	sbiw	r24, 0x00	; 0
 9ca:	61 f0       	breq	.+24     	; 0x9e4 <DIO_voidSetPortDirection+0x4e>
 9cc:	1e c0       	rjmp	.+60     	; 0xa0a <DIO_voidSetPortDirection+0x74>
 9ce:	2b 81       	ldd	r18, Y+3	; 0x03
 9d0:	3c 81       	ldd	r19, Y+4	; 0x04
 9d2:	22 30       	cpi	r18, 0x02	; 2
 9d4:	31 05       	cpc	r19, r1
 9d6:	81 f0       	breq	.+32     	; 0x9f8 <DIO_voidSetPortDirection+0x62>
 9d8:	8b 81       	ldd	r24, Y+3	; 0x03
 9da:	9c 81       	ldd	r25, Y+4	; 0x04
 9dc:	83 30       	cpi	r24, 0x03	; 3
 9de:	91 05       	cpc	r25, r1
 9e0:	81 f0       	breq	.+32     	; 0xa02 <DIO_voidSetPortDirection+0x6c>
 9e2:	13 c0       	rjmp	.+38     	; 0xa0a <DIO_voidSetPortDirection+0x74>
	{
	case DIO_PORTA:
		DDRA = Copy_u8Direction ;
 9e4:	ea e3       	ldi	r30, 0x3A	; 58
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	8a 81       	ldd	r24, Y+2	; 0x02
 9ea:	80 83       	st	Z, r24
 9ec:	0e c0       	rjmp	.+28     	; 0xa0a <DIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTB:
		DDRB = Copy_u8Direction ;
 9ee:	e7 e3       	ldi	r30, 0x37	; 55
 9f0:	f0 e0       	ldi	r31, 0x00	; 0
 9f2:	8a 81       	ldd	r24, Y+2	; 0x02
 9f4:	80 83       	st	Z, r24
 9f6:	09 c0       	rjmp	.+18     	; 0xa0a <DIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTC:
		DDRC = Copy_u8Direction ;
 9f8:	e4 e3       	ldi	r30, 0x34	; 52
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	8a 81       	ldd	r24, Y+2	; 0x02
 9fe:	80 83       	st	Z, r24
 a00:	04 c0       	rjmp	.+8      	; 0xa0a <DIO_voidSetPortDirection+0x74>
		break;
	case DIO_PORTD:
		DDRD = Copy_u8Direction ;
 a02:	e1 e3       	ldi	r30, 0x31	; 49
 a04:	f0 e0       	ldi	r31, 0x00	; 0
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	80 83       	st	Z, r24
		break;
	}
}
 a0a:	0f 90       	pop	r0
 a0c:	0f 90       	pop	r0
 a0e:	0f 90       	pop	r0
 a10:	0f 90       	pop	r0
 a12:	cf 91       	pop	r28
 a14:	df 91       	pop	r29
 a16:	08 95       	ret

00000a18 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue(u8 Copy_u8PortId , u8 Copy_u8Value)
{
 a18:	df 93       	push	r29
 a1a:	cf 93       	push	r28
 a1c:	00 d0       	rcall	.+0      	; 0xa1e <DIO_voidSetPortValue+0x6>
 a1e:	00 d0       	rcall	.+0      	; 0xa20 <DIO_voidSetPortValue+0x8>
 a20:	cd b7       	in	r28, 0x3d	; 61
 a22:	de b7       	in	r29, 0x3e	; 62
 a24:	89 83       	std	Y+1, r24	; 0x01
 a26:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortId)
 a28:	89 81       	ldd	r24, Y+1	; 0x01
 a2a:	28 2f       	mov	r18, r24
 a2c:	30 e0       	ldi	r19, 0x00	; 0
 a2e:	3c 83       	std	Y+4, r19	; 0x04
 a30:	2b 83       	std	Y+3, r18	; 0x03
 a32:	8b 81       	ldd	r24, Y+3	; 0x03
 a34:	9c 81       	ldd	r25, Y+4	; 0x04
 a36:	81 30       	cpi	r24, 0x01	; 1
 a38:	91 05       	cpc	r25, r1
 a3a:	d1 f0       	breq	.+52     	; 0xa70 <DIO_voidSetPortValue+0x58>
 a3c:	2b 81       	ldd	r18, Y+3	; 0x03
 a3e:	3c 81       	ldd	r19, Y+4	; 0x04
 a40:	22 30       	cpi	r18, 0x02	; 2
 a42:	31 05       	cpc	r19, r1
 a44:	2c f4       	brge	.+10     	; 0xa50 <DIO_voidSetPortValue+0x38>
 a46:	8b 81       	ldd	r24, Y+3	; 0x03
 a48:	9c 81       	ldd	r25, Y+4	; 0x04
 a4a:	00 97       	sbiw	r24, 0x00	; 0
 a4c:	61 f0       	breq	.+24     	; 0xa66 <DIO_voidSetPortValue+0x4e>
 a4e:	1e c0       	rjmp	.+60     	; 0xa8c <DIO_voidSetPortValue+0x74>
 a50:	2b 81       	ldd	r18, Y+3	; 0x03
 a52:	3c 81       	ldd	r19, Y+4	; 0x04
 a54:	22 30       	cpi	r18, 0x02	; 2
 a56:	31 05       	cpc	r19, r1
 a58:	81 f0       	breq	.+32     	; 0xa7a <DIO_voidSetPortValue+0x62>
 a5a:	8b 81       	ldd	r24, Y+3	; 0x03
 a5c:	9c 81       	ldd	r25, Y+4	; 0x04
 a5e:	83 30       	cpi	r24, 0x03	; 3
 a60:	91 05       	cpc	r25, r1
 a62:	81 f0       	breq	.+32     	; 0xa84 <DIO_voidSetPortValue+0x6c>
 a64:	13 c0       	rjmp	.+38     	; 0xa8c <DIO_voidSetPortValue+0x74>
	{
	case DIO_PORTA:
		PORTA = Copy_u8Value ;
 a66:	eb e3       	ldi	r30, 0x3B	; 59
 a68:	f0 e0       	ldi	r31, 0x00	; 0
 a6a:	8a 81       	ldd	r24, Y+2	; 0x02
 a6c:	80 83       	st	Z, r24
 a6e:	0e c0       	rjmp	.+28     	; 0xa8c <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTB:
		PORTB = Copy_u8Value ;
 a70:	e8 e3       	ldi	r30, 0x38	; 56
 a72:	f0 e0       	ldi	r31, 0x00	; 0
 a74:	8a 81       	ldd	r24, Y+2	; 0x02
 a76:	80 83       	st	Z, r24
 a78:	09 c0       	rjmp	.+18     	; 0xa8c <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTC:
		PORTC = Copy_u8Value ;
 a7a:	e5 e3       	ldi	r30, 0x35	; 53
 a7c:	f0 e0       	ldi	r31, 0x00	; 0
 a7e:	8a 81       	ldd	r24, Y+2	; 0x02
 a80:	80 83       	st	Z, r24
 a82:	04 c0       	rjmp	.+8      	; 0xa8c <DIO_voidSetPortValue+0x74>
		break;
	case DIO_PORTD:
		PORTD = Copy_u8Value ;
 a84:	e2 e3       	ldi	r30, 0x32	; 50
 a86:	f0 e0       	ldi	r31, 0x00	; 0
 a88:	8a 81       	ldd	r24, Y+2	; 0x02
 a8a:	80 83       	st	Z, r24
		break;
	}
}
 a8c:	0f 90       	pop	r0
 a8e:	0f 90       	pop	r0
 a90:	0f 90       	pop	r0
 a92:	0f 90       	pop	r0
 a94:	cf 91       	pop	r28
 a96:	df 91       	pop	r29
 a98:	08 95       	ret

00000a9a <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId)
{
 a9a:	df 93       	push	r29
 a9c:	cf 93       	push	r28
 a9e:	00 d0       	rcall	.+0      	; 0xaa0 <DIO_u8GetPortValue+0x6>
 aa0:	00 d0       	rcall	.+0      	; 0xaa2 <DIO_u8GetPortValue+0x8>
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
 aa6:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8inValue = 0;
 aa8:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortId)
 aaa:	8a 81       	ldd	r24, Y+2	; 0x02
 aac:	28 2f       	mov	r18, r24
 aae:	30 e0       	ldi	r19, 0x00	; 0
 ab0:	3c 83       	std	Y+4, r19	; 0x04
 ab2:	2b 83       	std	Y+3, r18	; 0x03
 ab4:	8b 81       	ldd	r24, Y+3	; 0x03
 ab6:	9c 81       	ldd	r25, Y+4	; 0x04
 ab8:	81 30       	cpi	r24, 0x01	; 1
 aba:	91 05       	cpc	r25, r1
 abc:	d1 f0       	breq	.+52     	; 0xaf2 <DIO_u8GetPortValue+0x58>
 abe:	2b 81       	ldd	r18, Y+3	; 0x03
 ac0:	3c 81       	ldd	r19, Y+4	; 0x04
 ac2:	22 30       	cpi	r18, 0x02	; 2
 ac4:	31 05       	cpc	r19, r1
 ac6:	2c f4       	brge	.+10     	; 0xad2 <DIO_u8GetPortValue+0x38>
 ac8:	8b 81       	ldd	r24, Y+3	; 0x03
 aca:	9c 81       	ldd	r25, Y+4	; 0x04
 acc:	00 97       	sbiw	r24, 0x00	; 0
 ace:	61 f0       	breq	.+24     	; 0xae8 <DIO_u8GetPortValue+0x4e>
 ad0:	1e c0       	rjmp	.+60     	; 0xb0e <DIO_u8GetPortValue+0x74>
 ad2:	2b 81       	ldd	r18, Y+3	; 0x03
 ad4:	3c 81       	ldd	r19, Y+4	; 0x04
 ad6:	22 30       	cpi	r18, 0x02	; 2
 ad8:	31 05       	cpc	r19, r1
 ada:	81 f0       	breq	.+32     	; 0xafc <DIO_u8GetPortValue+0x62>
 adc:	8b 81       	ldd	r24, Y+3	; 0x03
 ade:	9c 81       	ldd	r25, Y+4	; 0x04
 ae0:	83 30       	cpi	r24, 0x03	; 3
 ae2:	91 05       	cpc	r25, r1
 ae4:	81 f0       	breq	.+32     	; 0xb06 <DIO_u8GetPortValue+0x6c>
 ae6:	13 c0       	rjmp	.+38     	; 0xb0e <DIO_u8GetPortValue+0x74>
	{
	case DIO_PORTA:
		L_u8inValue = PINA ;
 ae8:	e9 e3       	ldi	r30, 0x39	; 57
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	80 81       	ld	r24, Z
 aee:	89 83       	std	Y+1, r24	; 0x01
 af0:	0e c0       	rjmp	.+28     	; 0xb0e <DIO_u8GetPortValue+0x74>
		break;
	case DIO_PORTB:
		L_u8inValue = PINB ;
 af2:	e6 e3       	ldi	r30, 0x36	; 54
 af4:	f0 e0       	ldi	r31, 0x00	; 0
 af6:	80 81       	ld	r24, Z
 af8:	89 83       	std	Y+1, r24	; 0x01
 afa:	09 c0       	rjmp	.+18     	; 0xb0e <DIO_u8GetPortValue+0x74>
		break;
	case DIO_PORTC:
		L_u8inValue = PINC ;
 afc:	e3 e3       	ldi	r30, 0x33	; 51
 afe:	f0 e0       	ldi	r31, 0x00	; 0
 b00:	80 81       	ld	r24, Z
 b02:	89 83       	std	Y+1, r24	; 0x01
 b04:	04 c0       	rjmp	.+8      	; 0xb0e <DIO_u8GetPortValue+0x74>
		break;
	case DIO_PORTD:
		L_u8inValue = PIND ;
 b06:	e0 e3       	ldi	r30, 0x30	; 48
 b08:	f0 e0       	ldi	r31, 0x00	; 0
 b0a:	80 81       	ld	r24, Z
 b0c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return L_u8inValue ;
 b0e:	89 81       	ldd	r24, Y+1	; 0x01
}
 b10:	0f 90       	pop	r0
 b12:	0f 90       	pop	r0
 b14:	0f 90       	pop	r0
 b16:	0f 90       	pop	r0
 b18:	cf 91       	pop	r28
 b1a:	df 91       	pop	r29
 b1c:	08 95       	ret

00000b1e <uart_cbk>:

volatile char buffer[10];
volatile u8 uart_flag = 0;

void uart_cbk(u8 data)
{
 b1e:	df 93       	push	r29
 b20:	cf 93       	push	r28
 b22:	0f 92       	push	r0
 b24:	cd b7       	in	r28, 0x3d	; 61
 b26:	de b7       	in	r29, 0x3e	; 62
 b28:	89 83       	std	Y+1, r24	; 0x01
	static u32 buffer_idx = 0;
	buffer[buffer_idx] = data;
 b2a:	80 91 69 00 	lds	r24, 0x0069
 b2e:	90 91 6a 00 	lds	r25, 0x006A
 b32:	a0 91 6b 00 	lds	r26, 0x006B
 b36:	b0 91 6c 00 	lds	r27, 0x006C
 b3a:	fc 01       	movw	r30, r24
 b3c:	e3 59       	subi	r30, 0x93	; 147
 b3e:	ff 4f       	sbci	r31, 0xFF	; 255
 b40:	89 81       	ldd	r24, Y+1	; 0x01
 b42:	80 83       	st	Z, r24
	if (buffer_idx == (sizeof(buffer) / sizeof(buffer[0])-1) || buffer[buffer_idx] == '\n' || buffer[buffer_idx] == '\r')
 b44:	80 91 69 00 	lds	r24, 0x0069
 b48:	90 91 6a 00 	lds	r25, 0x006A
 b4c:	a0 91 6b 00 	lds	r26, 0x006B
 b50:	b0 91 6c 00 	lds	r27, 0x006C
 b54:	89 30       	cpi	r24, 0x09	; 9
 b56:	91 05       	cpc	r25, r1
 b58:	a1 05       	cpc	r26, r1
 b5a:	b1 05       	cpc	r27, r1
 b5c:	e1 f0       	breq	.+56     	; 0xb96 <uart_cbk+0x78>
 b5e:	80 91 69 00 	lds	r24, 0x0069
 b62:	90 91 6a 00 	lds	r25, 0x006A
 b66:	a0 91 6b 00 	lds	r26, 0x006B
 b6a:	b0 91 6c 00 	lds	r27, 0x006C
 b6e:	fc 01       	movw	r30, r24
 b70:	e3 59       	subi	r30, 0x93	; 147
 b72:	ff 4f       	sbci	r31, 0xFF	; 255
 b74:	80 81       	ld	r24, Z
 b76:	8a 30       	cpi	r24, 0x0A	; 10
 b78:	71 f0       	breq	.+28     	; 0xb96 <uart_cbk+0x78>
 b7a:	80 91 69 00 	lds	r24, 0x0069
 b7e:	90 91 6a 00 	lds	r25, 0x006A
 b82:	a0 91 6b 00 	lds	r26, 0x006B
 b86:	b0 91 6c 00 	lds	r27, 0x006C
 b8a:	fc 01       	movw	r30, r24
 b8c:	e3 59       	subi	r30, 0x93	; 147
 b8e:	ff 4f       	sbci	r31, 0xFF	; 255
 b90:	80 81       	ld	r24, Z
 b92:	8d 30       	cpi	r24, 0x0D	; 13
 b94:	c1 f4       	brne	.+48     	; 0xbc6 <uart_cbk+0xa8>
	{
		buffer[buffer_idx] = '\0';
 b96:	80 91 69 00 	lds	r24, 0x0069
 b9a:	90 91 6a 00 	lds	r25, 0x006A
 b9e:	a0 91 6b 00 	lds	r26, 0x006B
 ba2:	b0 91 6c 00 	lds	r27, 0x006C
 ba6:	fc 01       	movw	r30, r24
 ba8:	e3 59       	subi	r30, 0x93	; 147
 baa:	ff 4f       	sbci	r31, 0xFF	; 255
 bac:	10 82       	st	Z, r1
		buffer_idx = 0 ;
 bae:	10 92 69 00 	sts	0x0069, r1
 bb2:	10 92 6a 00 	sts	0x006A, r1
 bb6:	10 92 6b 00 	sts	0x006B, r1
 bba:	10 92 6c 00 	sts	0x006C, r1
		uart_flag = 1;
 bbe:	81 e0       	ldi	r24, 0x01	; 1
 bc0:	80 93 68 00 	sts	0x0068, r24
 bc4:	13 c0       	rjmp	.+38     	; 0xbec <uart_cbk+0xce>
	}
	else
	{
		buffer_idx++;
 bc6:	80 91 69 00 	lds	r24, 0x0069
 bca:	90 91 6a 00 	lds	r25, 0x006A
 bce:	a0 91 6b 00 	lds	r26, 0x006B
 bd2:	b0 91 6c 00 	lds	r27, 0x006C
 bd6:	01 96       	adiw	r24, 0x01	; 1
 bd8:	a1 1d       	adc	r26, r1
 bda:	b1 1d       	adc	r27, r1
 bdc:	80 93 69 00 	sts	0x0069, r24
 be0:	90 93 6a 00 	sts	0x006A, r25
 be4:	a0 93 6b 00 	sts	0x006B, r26
 be8:	b0 93 6c 00 	sts	0x006C, r27
	}
}
 bec:	0f 90       	pop	r0
 bee:	cf 91       	pop	r28
 bf0:	df 91       	pop	r29
 bf2:	08 95       	ret

00000bf4 <main>:
//{
//	UART_voidTransmitByte_synch('A');
//}

int main()
{
 bf4:	df 93       	push	r29
 bf6:	cf 93       	push	r28
 bf8:	cd b7       	in	r28, 0x3d	; 61
 bfa:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DIO_PORTA , DIO_PIN0 , DIO_OUTPUT);
 bfc:	80 e0       	ldi	r24, 0x00	; 0
 bfe:	60 e0       	ldi	r22, 0x00	; 0
 c00:	41 e0       	ldi	r20, 0x01	; 1
 c02:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <DIO_voidSetPinDirection>

	UART_voidInit();
 c06:	0e 94 49 00 	call	0x92	; 0x92 <UART_voidInit>
	UART_voidSetBaudRate(9600);
 c0a:	60 e8       	ldi	r22, 0x80	; 128
 c0c:	75 e2       	ldi	r23, 0x25	; 37
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	0e 94 bf 00 	call	0x17e	; 0x17e <UART_voidSetBaudRate>
	UART_voidRegisterCallback(0,uart_cbk);
 c16:	2f e8       	ldi	r18, 0x8F	; 143
 c18:	35 e0       	ldi	r19, 0x05	; 5
 c1a:	80 e0       	ldi	r24, 0x00	; 0
 c1c:	b9 01       	movw	r22, r18
 c1e:	0e 94 68 01 	call	0x2d0	; 0x2d0 <UART_voidRegisterCallback>

	GIE_voidEnable();
 c22:	0e 94 b8 01 	call	0x370	; 0x370 <GIE_voidEnable>
	UART_voidSendString("ASSEM");
 c26:	80 e6       	ldi	r24, 0x60	; 96
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 94 21 01 	call	0x242	; 0x242 <UART_voidSendString>

	while(1)
	{
		if (uart_flag == 1) {
 c2e:	80 91 68 00 	lds	r24, 0x0068
 c32:	81 30       	cpi	r24, 0x01	; 1
 c34:	e1 f7       	brne	.-8      	; 0xc2e <main+0x3a>
			if(buffer[0] == 'a')
 c36:	80 91 6d 00 	lds	r24, 0x006D
 c3a:	81 36       	cpi	r24, 0x61	; 97
 c3c:	21 f4       	brne	.+8      	; 0xc46 <main+0x52>
			{
				DIO_voidTogglePin(DIO_PORTA , DIO_PIN0 );
 c3e:	80 e0       	ldi	r24, 0x00	; 0
 c40:	60 e0       	ldi	r22, 0x00	; 0
 c42:	0e 94 4e 04 	call	0x89c	; 0x89c <DIO_voidTogglePin>
			}
			UART_voidSendString(buffer) ;
 c46:	8d e6       	ldi	r24, 0x6D	; 109
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	0e 94 21 01 	call	0x242	; 0x242 <UART_voidSendString>
			UART_voidTransmitByte_synch('\r');
 c4e:	8d e0       	ldi	r24, 0x0D	; 13
 c50:	0e 94 8c 00 	call	0x118	; 0x118 <UART_voidTransmitByte_synch>
			uart_flag = 0;
 c54:	10 92 68 00 	sts	0x0068, r1
 c58:	ea cf       	rjmp	.-44     	; 0xc2e <main+0x3a>

00000c5a <__udivmodsi4>:
 c5a:	a1 e2       	ldi	r26, 0x21	; 33
 c5c:	1a 2e       	mov	r1, r26
 c5e:	aa 1b       	sub	r26, r26
 c60:	bb 1b       	sub	r27, r27
 c62:	fd 01       	movw	r30, r26
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <__udivmodsi4_ep>

00000c66 <__udivmodsi4_loop>:
 c66:	aa 1f       	adc	r26, r26
 c68:	bb 1f       	adc	r27, r27
 c6a:	ee 1f       	adc	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	a2 17       	cp	r26, r18
 c70:	b3 07       	cpc	r27, r19
 c72:	e4 07       	cpc	r30, r20
 c74:	f5 07       	cpc	r31, r21
 c76:	20 f0       	brcs	.+8      	; 0xc80 <__udivmodsi4_ep>
 c78:	a2 1b       	sub	r26, r18
 c7a:	b3 0b       	sbc	r27, r19
 c7c:	e4 0b       	sbc	r30, r20
 c7e:	f5 0b       	sbc	r31, r21

00000c80 <__udivmodsi4_ep>:
 c80:	66 1f       	adc	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a 94       	dec	r1
 c8a:	69 f7       	brne	.-38     	; 0xc66 <__udivmodsi4_loop>
 c8c:	60 95       	com	r22
 c8e:	70 95       	com	r23
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	9b 01       	movw	r18, r22
 c96:	ac 01       	movw	r20, r24
 c98:	bd 01       	movw	r22, r26
 c9a:	cf 01       	movw	r24, r30
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
